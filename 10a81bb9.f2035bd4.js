(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{116:function(e,t,r){"use strict";r.d(t,"a",(function(){return d})),r.d(t,"b",(function(){return m}));var n=r(0),c=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,c=function(e,t){if(null==e)return{};var r,n,c={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(c[r]=e[r]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(c[r]=e[r])}return c}var l=c.a.createContext({}),p=function(e){var t=c.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return c.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},b=c.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(r),b=n,m=d["".concat(o,".").concat(b)]||d[b]||u[b]||a;return r?c.a.createElement(m,i(i({ref:t},l),{},{components:r})):c.a.createElement(m,i({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var l=2;l<a;l++)o[l]=r[l];return c.a.createElement.apply(null,o)}return c.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},62:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return p}));var n=r(2),c=r(6),a=(r(0),r(116)),o={title:"mastercard Overview",sidebar_label:"Overview"},i={unversionedId:"websites/mastercard/overview",id:"websites/mastercard/overview",isDocsHomePage:!1,title:"mastercard Overview",description:"see Development Websites Dashboard for details",source:"@site/docs/websites/mastercard/overview.md",slug:"/websites/mastercard/overview",permalink:"/k8-proxy-documentation/docs/websites/mastercard/overview",version:"current",sidebar_label:"Overview",sidebar:"docs",previous:{title:"gwwebsite Overview",permalink:"/k8-proxy-documentation/docs/websites/gwwebsite/overview"},next:{title:"microsoft Overview",permalink:"/k8-proxy-documentation/docs/websites/microsoft/overview"}},s=[{value:"Demo video",id:"demo-video",children:[]}],l={rightToc:s};function p(e){var t=e.components,r=Object(c.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"see ",Object(a.b)("a",{parentName:"p",href:"/k8-proxy-documentation/docs/dashboards/websites/development"},"Development Websites Dashboard for details")),Object(a.b)("h1",{id:"reverse-proxy-configuration-for-mastercard-website"},"Reverse proxy configuration for mastercard website"),Object(a.b)("p",null,"(mastercard.co.uk.glasswall-icap.com)"),Object(a.b)("h2",{id:"demo-video"},"Demo video"),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"http://www.youtube.com/watch?v=jKVaHXvNlJQ",title:"Mastercard"},Object(a.b)("img",{parentName:"a",src:"http://img.youtube.com/vi/jKVaHXvNlJQ/0.jpg",alt:null}))),Object(a.b)("p",null,"Steps:"),Object(a.b)("p",null,"1.Create an instance in EC2 and link Elastic IP to it"),Object(a.b)("p",null,"2.Launch Rancher in ec2 instance"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"docker run -d --restart=unless-stopped -p 8080:80 -p 8443:443 --privileged rancher/rancher:latest\n")),Object(a.b)("p",null,"3.Setup AWS cloud credentials"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'Under profile, select "Cloud Credentials" and click on "Add Cloud Credentials". Populate the details of region, access key, secret key, credentails name and save it.\n')),Object(a.b)("p",null,"4.Create an ec2 node template."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'Under profile, select "Node templates" and click on "Add template". Choose Amazon ec2 type for node template and fill it.\n')),Object(a.b)("p",null,"5.Create a K8s cluster.\nGo to Clusters in rancher UI."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"* Click on Add cluster. \n* Select Existing nodes\n* Provide a cluster name\n* Click on next\n* Select all 3 checkbox and click Advance\n* add public IP / elastic IP in public address \n* Copy command and run it in ec2 instance\n")),Object(a.b)("p",null,"6.Copy k8 custer config from rancher and setup cluster\nexport KUBECONFIG=kubeconfig\nkubectl get nodes"),Object(a.b)("ol",{start:7},Object(a.b)("li",{parentName:"ol"})),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"    git clone https://github.com/k8-proxy/gp-mastercard-website\n    \n    cd gp-mastercard-website/\n    \n    git checkout master_card_proxy \n    \n    git pull\n    \n    git clone https://github.com/k8-proxy/s-k8-proxy-rebuild\n    \n    git clone https://github.com/k8-proxy/k8-reverse-proxy\n    \n    cd s-k8-proxy-rebuild/\n    \n    git checkout ssl_certs\n    \n    git pull\n    \n    cd ..\n  \n    cp values.yaml s-k8-proxy-rebuild/stable-src/chart/values.yaml \n    \n")),Object(a.b)("p",null,"10.Push images to dockerhub"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"docker login\n\ncd k8-reverse-proxy/stable-src\n\ndocker build nginx -t <docker registry>/reverse-proxy-nginx:0.0.1\ndocker build squid -t <docker registry>/reverse-proxy-squid:0.0.1\nwget -O c-icap/Glasswall-Rebuild-SDK-Evaluation/Linux/Library/libglasswall.classic.so https://github.com/filetrust/Glasswall-Rebuild-SDK-Evaluation/releases/download/1.117/libglasswall.classic.so # Get latest evaluation build of GW Rebuild engine\ndocker build c-icap -t <docker registry>/reverse-proxy-c-icap:0.0.1\n\ndocker push <docker registry>/reverse-proxy-nginx:0.0.1\ndocker push <docker registry>/reverse-proxy-squid:0.0.1 \ndocker push <docker registry>/reverse-proxy-c-icap:0.0.1\n")),Object(a.b)("p",null,"11.Create certificate"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"* Register DNS for your domain\n* SSH into instance where cluster is present\n* sudo apt-get update -y\n  sudo apt-get install certbot python3-certbot-nginx -y\n  sudo certbot certonly --nginx\n  \n* Add your email and add domain www.mastercard.co.uk.glasswall-icap.com \n* certificates will be created in /etc/letsencrypt/live/www.mastercard.co.uk.glasswall-icap.com/\n\n* Copy below output for crt and key respnectively\n\ncrt=cat /etc/letsencrypt/live/www.mastercard.co.uk.glasswall-icap.com/fullchain.pem | base64\nkey=cat /etc/letsencrypt/live/www.mastercard.co.uk.glasswall-icap.com/privkey.pem | base64\n")),Object(a.b)("p",null,"12.Deploy proxy"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"    cd s-k8-proxy-rebuild/stable_src/\n    \n    export KUBECONFIG=kubeconfig\n    \n    Replace crt and key with generated key above\n    \n    helm upgrade --install \\\n        --set image.nginx.repository=<docker registry>/reverse-proxy-nginx \\\n        --set image.nginx.tag=0.0.1 \\\n        --set image.squid.repository=<docker registry>/reverse-proxy-squid \\\n        --set image.squid.tag=0.0.1 \\\n        --set image.icap.repository=<docker registry>/reverse-proxy-c-icap \\\n        --set image.icap.tag=0.0.1 \\\n        --set ingress.tls.crt= crt \\\n        --set ingress.tls.key= key \\\n        reverse-proxy chart/\n\n")))}p.isMDXComponent=!0}}]);