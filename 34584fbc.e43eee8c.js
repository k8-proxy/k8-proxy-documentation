(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{124:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return m}));var a=r(0),n=r.n(a);function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},c=Object.keys(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=n.a.createContext({}),p=function(e){var t=n.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},b=function(e){var t=p(e.components);return n.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(r),u=a,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||c;return r?n.a.createElement(m,i(i({ref:t},s),{},{components:r})):n.a.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=r.length,o=new Array(c);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<c;s++)o[s]=r[s];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},77:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return p}));var a=r(2),n=r(6),c=(r(0),r(124)),o={title:"emma-dataport Overview",sidebar_label:"Overview"},i={unversionedId:"websites/emma-dataport/overview",id:"websites/emma-dataport/overview",isDocsHomePage:!1,title:"emma-dataport Overview",description:"see Development Websites Dashboard for details",source:"@site/docs/websites/emma-dataport/overview.md",slug:"/websites/emma-dataport/overview",permalink:"/k8-proxy-documentation/docs/websites/emma-dataport/overview",version:"current",sidebar_label:"Overview",sidebar:"docs",previous:{title:"bsigroup Overview",permalink:"/k8-proxy-documentation/docs/websites/bsigroup/overview"},next:{title:"fortinet Overview",permalink:"/k8-proxy-documentation/docs/websites/fortinet/overview"}},l=[{value:"Reverse proxy setup for dataport.emma.msrb.org",id:"reverse-proxy-setup-for-dataportemmamsrborg",children:[]},{value:"Server capacity requirements",id:"server-capacity-requirements",children:[]},{value:"Client machine tooling requirement",id:"client-machine-tooling-requirement",children:[]},{value:"Clone the needed repositories",id:"clone-the-needed-repositories",children:[]},{value:"Install rancher",id:"install-rancher",children:[{value:"Install rancher on aws",id:"install-rancher-on-aws",children:[]},{value:"Install rancher on your client machine",id:"install-rancher-on-your-client-machine",children:[]}]},{value:"Deploy adaptation service and proxies (Run all these commands from your machine)",id:"deploy-adaptation-service-and-proxies-run-all-these-commands-from-your-machine",children:[]}],s={rightToc:l};function p(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"see ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/k8-proxy-documentation/docs/dashboards/websites/development"}),"Development Websites Dashboard for details")),Object(c.b)("h2",{id:"reverse-proxy-setup-for-dataportemmamsrborg"},"Reverse proxy setup for dataport.emma.msrb.org"),Object(c.b)("h2",{id:"server-capacity-requirements"},"Server capacity requirements"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("strong",{parentName:"p"},"Minimal capacity"),"\nRam : 4G\nCPU Cores : 2")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("strong",{parentName:"p"},"Recommended capacity"),"\nRam : 8G\nCPU Cores : 4"))),Object(c.b)("h2",{id:"client-machine-tooling-requirement"},"Client machine tooling requirement"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("strong",{parentName:"p"},"kubectl tool"),"\nInstall using instructions from here : ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://kubernetes.io/docs/tasks/tools/install-kubectl/"}),"https://kubernetes.io/docs/tasks/tools/install-kubectl/"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("strong",{parentName:"p"},"Docker"),"\nInstall using instructions from here : ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.docker.com/get-docker/"}),"https://docs.docker.com/get-docker/"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("strong",{parentName:"p"},"Git"),"\nInstall using instructions from here : ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"}),"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("strong",{parentName:"p"},"Helm"),"\nInstall using instructions from here : ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://helm.sh/docs/intro/install/"}),"https://helm.sh/docs/intro/install/")))),Object(c.b)("h2",{id:"clone-the-needed-repositories"},"Clone the needed repositories"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"git clone https://github.com/k8-proxy/icap-infrastructure\ngit clone https://github.com/k8-proxy/k8-reverse-proxy.git\ngit clone https://github.com/k8-proxy/s-k8-proxy-rebuild.git\n")),Object(c.b)("h2",{id:"install-rancher"},"Install rancher"),Object(c.b)("h3",{id:"install-rancher-on-aws"},"Install rancher on aws"),Object(c.b)("p",null,"Follow documentation from ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/k8-proxy/s-k8-proxy-rebuild/tree/master/stable-src#install-kubernetes"}),"https://github.com/k8-proxy/s-k8-proxy-rebuild/tree/master/stable-src#install-kubernetes")),Object(c.b)("h3",{id:"install-rancher-on-your-client-machine"},"Install rancher on your client machine"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"Deploy rancher server using docker")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"docker run -d --restart=unless-stopped \\\n  -p 8080:80 -p 8443:443 \\\n  --privileged \\\n  rancher/rancher:latest\n")),Object(c.b)("p",null,"Once the docker is running, it takes few minutes to initialize the server. Once the server is started, access the rancher UI on https://","[host or IP]",":8443"),Object(c.b)("ol",{start:4},Object(c.b)("li",{parentName:"ol"},"Get the cluster credentials")),Object(c.b)("p",null,'When you log in you should should see a local cluster installed. You can get it\'s credentials and use it.\nClick on that local cluster, On the right top, click on "Kubeconfig File" and copy the config file data.\nCreate a local file called ',Object(c.b)("inlineCode",{parentName:"p"},"kubeconfig")," and paste the copied data."),Object(c.b)("ol",{start:5},Object(c.b)("li",{parentName:"ol"},"Test the cluster deployment:")),Object(c.b)("p",null,'Select and open the cluster to be tested. On the right top, click on "Kubeconfig File" and copy the config file data.\nCreate a local file called ',Object(c.b)("inlineCode",{parentName:"p"},"kubeconfig")," and paste the copied data.\nSet the KUBECONFIG environment variable to point to that file"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"export KUBECONFIG=kubeconfig\n")),Object(c.b)("p",null,"Verify that the setup works, Commands bellow should generate some output"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl get nodes\nkubectl get all --all-namespaces\n")),Object(c.b)("h2",{id:"deploy-adaptation-service-and-proxies-run-all-these-commands-from-your-machine"},"Deploy adaptation service and proxies (Run all these commands from your machine)"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Install ICAP server and adaptation service")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"cd icap-infrastructure/adaptation\n")),Object(c.b)("p",null,"Create the Kubernetes namespace"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl create ns icap-adaptation\n")),Object(c.b)("p",null,"Create container registry secret"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl create -n icap-adaptation secret docker-registry regcred    \\ \n    --docker-server=https://index.docker.io/v1/     \\\n    --docker-username=<username>    \\\n    --docker-password=<password>    \\\n    --docker-email=<email address>\n")),Object(c.b)("p",null,"copy the updated helm template file mvp-icap-service-configmap.yml from gp-emma-dataport-website repo to the templates folder "),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"cp ../../gp-emma-dataport-website/patch/mvp-icap-service-configmap.yml templates/\n")),Object(c.b)("p",null,"Install the cluster components"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"helm install . --namespace icap-adaptation --generate-name\n")),Object(c.b)("p",null,"The cluster's services should now be deployed"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"> kubectl get pods -n icap-adaptation\nNAME                                 READY   STATUS    RESTARTS   AGE\nadaptation-service-64cc49f99-kwfp6   1/1     Running   0          3m22s\nmvp-icap-service-b7ddccb9-gf4z6      1/1     Running   0          3m22s\nrabbitmq-controller-747n4            1/1     Running   0          3m22s\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Setup squid icap client and nginx for reverse proxy")),Object(c.b)("p",null,"Switch to the reverse proxy build repo"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"  cd ../../k8-reverse-proxy/stable-src/\n")),Object(c.b)("p",null,"Build and push the needed images to your dockerhub registry"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"  docker build nginx -t <docker registry>/reverse-proxy-nginx:0.0.1\n  docker push <docker registry>/reverse-proxy-nginx:0.0.1\n\n  docker build squid -t <docker registry>/reverse-proxy-squid:0.0.1\n  docker push <docker registry>/reverse-proxy-squid:0.0.1\n")),Object(c.b)("p",null,"Switch to the reverse proxy k8s deployment repo"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"  cd ../../s-k8-proxy-rebuild/stable-src/\n")),Object(c.b)("p",null,"Record the icap server service IP address (it seems like squid doesn't like when we use the service name, still investigating that)"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"  $ kubectl -n icap-adaptation get svc | grep icap-service\n  icap-service                        NodePort       10.4.6.142   none          1344:32278/TCP   23h\n")),Object(c.b)("p",null,"For the example above, ip is 10.4.6.142 "),Object(c.b)("p",null,"Setup the services"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"  helm upgrade --namespace icap-adaptation upgrade --install \\\n    --set image.nginx.repository=docker registry>/reverse-proxy-nginx \\\n    --set image.nginx.tag=0.0.1 \\\n    --set image.squid.repository=docker registry>/reverse-proxy-squid \\\n    --set image.squid.tag=0.0.1 \\\n    --set image.icap.repository=docker registry>/reverse-proxy-c-icap \\\n    --set image.icap.tag=0.0.1 \\\n    --set application.nginx.env.ALLOWED_DOMAINS='dataport.emma.msrb.org.glasswall-icap.com\\,www.dataport.emma.msrb.org.glasswall-icap.com' \\\n    --set application.nginx.env.ROOT_DOMAIN='glasswall-icap.com' \\\n    --set application.nginx.env.SUBFILTER_ENV='dataport.emma.msrb.org\\,dataport.emma.msrb.org.glasswall-icap.com' \\\n    --set application.squid.env.ALLOWED_DOMAINS='dataport.emma.msrb.org.glasswall-icap.com\\,www.dataport.emma.msrb.org.glasswall-icap.com' \\\n    --set application.squid.env.ROOT_DOMAIN='glasswall-icap.com' \\\n    reverse-proxy chart/\n")),Object(c.b)("p",null,"Edit the nginx deployment to set the correct icap server url (we need to use the icap server from adaptation service)\nThe server url should be : icap://ip_recorded above:1344/gw_rebuild"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"  $ kubectl -n icap-adaptation edit deployment/reverse-proxy-nginx\n")),Object(c.b)("p",null,"Edit the squid deployment to set the correct icap server url (we need to use the icap server from adaptation service)\nThe server url should be : icap://ip_recorded above>:1344/gw_rebuild"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"  $ kubectl -n icap-adaptation edit deployment/reverse-proxy-quid\n")),Object(c.b)("p",null,"Setup port forward to be able to test from your host"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"   $ kubectl -n icap-adaptation port-forward svc/reverse-proxy-reverse-proxy-nginx 443:443\n")),Object(c.b)("p",null,"Add the following line in your host file and test the setup"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"   127.0.0.1     dataport.emma.msrb.org.glasswall-icap.com www.dataport.emma.msrb.org.glasswall-icap.com assets.publishing.service.gov.uk.glasswall-icap.com\n")),Object(c.b)("p",null,"..."))}p.isMDXComponent=!0}}]);