(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{100:function(e,t,n){"use strict";function o(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=o(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=o(e))&&(r&&(r+=" "),r+=t);return r}},110:function(e,t,n){"use strict";var o=n(0),r=n(111);t.a=function(){var e=Object(o.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},111:function(e,t,n){"use strict";var o=n(0),r=Object(o.createContext)(void 0);t.a=r},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return m})),n.d(t,"metadata",(function(){return y})),n.d(t,"rightToc",(function(){return w})),n.d(t,"default",(function(){return O}));var o=n(2),r=n(6),i=n(0),a=n.n(i),s=n(99),l=n(110),c=n(100),u=n(68),d=n.n(u),p=37,f=39;var b=function(e){var t=e.block,n=e.children,o=e.defaultValue,r=e.values,s=e.groupId,u=e.className,b=Object(l.a)(),h=b.tabGroupChoices,m=b.setTabGroupChoices,y=Object(i.useState)(o),w=y[0],g=y[1],O=Object(i.useState)(!1),_=O[0],v=O[1];if(null!=s){var j=h[s];null!=j&&j!==w&&r.some((function(e){return e.value===j}))&&g(j)}var x=function(e){g(e),null!=s&&m(s,e)},k=[],P=function(e){e.metaKey||e.altKey||e.ctrlKey||v(!0)},T=function(){v(!1)};return Object(i.useEffect)((function(){return window.addEventListener("keydown",P),window.addEventListener("mousedown",T),function(){window.removeEventListener("keydown",P),window.removeEventListener("mousedown",T)}}),[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t},u)},r.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":w===t,className:Object(c.a)("tabs__item",d.a.tabItem,{"tabs__item--active":w===t}),style:_?{}:{outline:"none"},key:t,ref:function(e){return k.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case f:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case p:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(k,e.target,e),P(e)},onFocus:function(){return x(t)},onClick:function(){x(t),v(!1)},onPointerDown:function(){return v(!1)}},n)}))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},i.Children.toArray(n).filter((function(e){return e.props.value===w}))[0]))};var h=function(e){return a.a.createElement("div",null,e.children)},m={title:"Python/PHP Code Sample",sidebar_label:"Python/PHP Code Sample"},y={unversionedId:"products/gw cloud sdk/python-sample",id:"products/gw cloud sdk/python-sample",isDocsHomePage:!1,title:"Python/PHP Code Sample",description:"<Tabs",source:"@site/docs/products/gw cloud sdk/python-sample.md",slug:"/products/gw cloud sdk/python-sample",permalink:"/k8-proxy-documentation/docs/products/gw cloud sdk/python-sample",version:"current",sidebar_label:"Python/PHP Code Sample",sidebar:"docs",previous:{title:"Deployment",permalink:"/k8-proxy-documentation/docs/products/gw cloud sdk/deployment"},next:{title:"GW Desktop App",permalink:"/k8-proxy-documentation/docs/products/gw desktop app/overview"}},w=[{value:"api/rebuild/base64",id:"apirebuildbase64",children:[]},{value:"api/rebuild/file",id:"apirebuildfile",children:[]},{value:"api/rebuild/zipfile",id:"apirebuildzipfile",children:[]},{value:"api/rebuild/base64 using php",id:"apirebuildbase64-using-php",children:[]}],g={rightToc:w};function O(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(o.a)({},g,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)(b,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"PHP",value:"php"}],mdxType:"Tabs"},Object(s.b)(h,{value:"python",mdxType:"TabItem"},Object(s.b)("h1",{id:"python"},"Python"),Object(s.b)("p",null,"The following code snippets are examples of calling the GW Cloud SDK using Python. The requests library is used to execute calls to the API."),Object(s.b)("h2",{id:"apirebuildbase64"},"api/rebuild/base64"),Object(s.b)("p",null,"\u200bIn this example files are loaded from the OS and a request with the content type of 'application/json' is formed. The request is then sent to the API using the POST method. The JSON body also contains the content management flags."),Object(s.b)("p",null,"The rebuilt file is returned as Base64, decoded by the client and written to disk."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'import base64\nimport requests\n\u200b\n\u200b\nurl = "https://<host>:<port>/api/rebuild/base64"\n\u200b\n""" rebuild a single file using the base64 endpoint.\nallow (0) review comments in microsoft word files """\n\u200b\n# open a local file\nwith open("data/doc/embedded_images_12kb.docx", "rb") as f:\n    # convert from bytes to str of base64 string\n    base64_string_input = base64.b64encode(f.read()).decode()\n\u200b\n# send post request to /base64 endpoint, returns base64 encoded bytes\nresponse = requests.post(\n    url=url,\n    json={\n        "Base64": base64_string_input,\n        "ContentManagementFlags": {\n            "WordContentManagement": {\n                "ReviewComments": 0,\n            }\n        }\n    }\n)\n\u200b\n# convert base64 encoded bytes to string\nbase64_string_output = response.content.decode()\n\u200b\n# metadata has been removed, ensure base64 strings are different\nassert base64_string_input != base64_string_output\n\u200b\n# decode base64 string to bytes\nsanitised_file_bytes = base64.b64decode(base64_string_output)\n\u200b\n# write file locally\nwith open("data/doc/embedded_images_12kb_gwsanitised.docx", "wb") as f:\n')),Object(s.b)("h2",{id:"apirebuildfile"},"api/rebuild/file"),Object(s.b)("p",null,"In this example the contents of the raw file are uploaded in a body with a content type of 'multipart/form-data'. The content management flags are serialised and sent as part of the form."),Object(s.b)("p",null,"The rebuilt file contents are returned to the client and written to disk."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'import json\nimport os\nimport requests\n\u200b\nurl = "https://<host>:<port>/api/rebuild/file"\n\u200b\n""" rebuild all files in the "data" directory, writing to a new "data_gwsanitised" directory with the same folder structure.\ndisallow (2) excel files that contain macros and don\'t write them to the new directory.\nallow (0) internal and external hyperlinks found in word documents, but sanitise other content\nsanitise (1, default) and write all other files. """\ndirectory = "data"\nfor root, dirs, files in os.walk(directory):\n    for file_ in files:\n        # create input and out file file paths\n        input_file = os.path.join(root, file_)\n        output_file = os.path.join(f"{directory}_gwsanitised", os.path.relpath(input_file, directory))\n        with open(input_file, "rb") as f:\n            # send post request\n            response = requests.post(\n                url=url,\n                files=[("file", f)],\n                headers={                    \n                    "accept": "application/octet-stream"\n                },\n                data={\n                    "contentManagementFlagJson": json.dumps({\n                        "ExcelContentManagement": {\n                            "Macros": 2,\n                        },\n                        "WordContentManagement": {\n                            "InternalHyperlinks": 0,\n                            "ExternalHyperlinks": 0,\n                            "EmbeddedFiles": 1,\n                            "EmbeddedImages": 1,\n                        }\n                    })\n                }\n            )\n        if response.status_code == 200 and response.content:\n            # glasswall successfully sanitised this file, write it to the new directory\n            os.makedirs(os.path.dirname(output_file), exist_ok=True)\n            with open(output_file, "wb") as f:\n                f.write(response.content)\n')),Object(s.b)("h2",{id:"apirebuildzipfile"},"api/rebuild/zipfile"),Object(s.b)("p",null,"In this example the contents of the zip file are uploaded in a body with a content type of 'application/zip'."),Object(s.b)("p",null,"The rebuilt file contents are returned to the client and written to disk."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'import json\nimport os\nimport requests\n\u200b\nurl = "https://<host>:<port>/api/rebuild/zipfile"\n\u200b\n""" rebuild all files in the "data" directory, writing to a new "data_gwsanitised" directory with the same folder structure.\ndisallow (2) excel files that contain macros and don\'t write them to the new directory.\nallow (0) internal and external hyperlinks found in word documents, but sanitise other content\nsanitise (1, default) and write all other files. """\ndirectory = "data"\nfor root, dirs, files in os.walk(directory):\n    for file_ in files:\n        # create input and out file file paths\n        input_file = os.path.join(root, file_)\n        output_file = os.path.join(f"{directory}_gwsanitised", os.path.relpath(input_file, directory))\n        with open(input_file, "rb") as f:\n            # send post request\n            response = requests.post(\n                url=url,\n                files=[("file", f)],\n                headers={     \n                    "content-type":"application/zip",               \n                    "accept": "application/octet-stream"\n                }\n            )\n        if response.status_code == 200 and response.content:\n            # glasswall successfully sanitised this file, write it to the new directory\n            os.makedirs(os.path.dirname(output_file), exist_ok=True)\n            with open(output_file, "wb") as f:\n                f.write(response.content)\n'))),Object(s.b)(h,{value:"php",mdxType:"TabItem"},Object(s.b)("h1",{id:"php"},"PHP"),Object(s.b)("p",null,"The following code snippets are examples of calling the GW Cloud SDK using php. The requests library is used to execute calls to the API."),Object(s.b)("h2",{id:"apirebuildbase64-using-php"},"api/rebuild/base64 using php"),Object(s.b)("p",null,"\u200bIn this example files are loaded from the OS and a request with the content type of 'application/json' is formed. The request is then sent to the API using the POST method. The JSON body also contains the content management flags."),Object(s.b)("p",null,"The rebuilt file is returned as Base64, decoded by the client and written to disk."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'<?php\n$jwt_token = "YOUR_JWT_TOKEN";\nurl = "https://<host>:<port>/api/rebuild/base64"\n// local file\n$Input_File = \'YOUR/INPUT/FILE.docx\';\n$output_file_path = "YOUR/OUTPUT/FILE.docx";\n// convert base64 encoded bytes to string\n$base64 = base64_encode(file_get_contents($Input_File));\n$data = [\n    \'Base64\' => $base64,\n    \'ContentManagementFlags\' => [\n        \'WordContentManagement\' => [\n            \'ReviewComments\' => \'0\'\n        ],\n    ]\n];\n$json_data = json_encode($data);\n// create  context \n$context = stream_context_create([\n    \'http\' => [\n        \'method\' => \'POST\',\n        \'header\' => "Authorization: " . $jwt_token . "\\r\\n" .\n            "Content-type: application/json\\r\\n" .\n            "Accept: application/json\\r\\n" .\n            "Connection: close\\r\\n" .\n            "Content-length: " . strlen($json_data) . "\\r\\n",\n        \'content\' => $json_data\n    ],\n\n]);\n//Send a file to Glasswall\'s GW Cloud SDK  endpoint, returns base64 encoded bytes\n$response = file_get_contents($url, false, $context);\nif ($response === false) {\n    exit("Unable to get data at $url");\n}\n//decode base64 string to bytes\n$base64_string_output = base64_decode($response);\n//save file to local\nif (file_put_contents($output_file_path, $base64_string_output)) {\n    echo "File downloaded successfully";\n} else {\n    echo "File downloading failed.";\n}\n')))))}O.isMDXComponent=!0},99:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},f=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,b=d["".concat(a,".").concat(f)]||d[f]||p[f]||i;return n?r.a.createElement(b,s(s({ref:t},c),{},{components:n})):r.a.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);